import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'maven-publish'
apply plugin: "de.mannodermaus.android-junit5"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode rover_campaigns_sdk_version_code
        versionName rover_campaigns_sdk_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Add Kotlin source directory to all source sets
    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
        }
    }

    kotlinOptions { jvmTarget = "1.8" }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'


    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation project(':core')

    testImplementation 'junit:junit:4.12'
    // spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek_version"
    testImplementation 'com.natpryce:hamkrest:1.6.0.0'
    testImplementation 'org.amshove.kluent:kluent:1.30'
    testImplementation 'org.amshove.kluent:kluent-android:1.30'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.27.0"
    // additional 3rd party ruleset(s) can be specified here
    // just add them to the classpath (ktlint 'groupId:artifactId:version') and
    // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}


dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

ext {
    groupId = 'io.rover.campaigns' // package name of the project
    artifactId = "notifications" // module name of the library
    libVersion = rover_campaigns_sdk_version
}

//just copy paste the lines below
if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            url System.getenv('DEPLOY_MAVEN_PATH')
        }
    }

    publications {
        production(MavenPublication) {
            artifact("$buildDir/outputs/aar/$artifactId-release.aar")
            groupId "io.rover.campaigns"
            artifactId artifactId
            version rover_campaigns_sdk_version

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each

                def apiAndImplementationDeps = configurations.implementation.allDependencies + configurations.compile.allDependencies

                // get all the api *and* implementation dependencies
                apiAndImplementationDeps.each {
                    if(it instanceof DefaultExternalModuleDependency) {
                        println("ITERATING OVER DEPENDENCY: $it")
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', "compile")
                    }
                }

                // notice that project scope dependencies are not handled. Instead, we must add them
                // as external dependencies manually.
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', 'io.rover.campaigns')
                dependencyNode.appendNode('artifactId', 'core')
                dependencyNode.appendNode('version', rover_campaigns_sdk_version)
            }

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
}
